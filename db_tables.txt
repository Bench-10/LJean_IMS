# HERE ARE THE FOLLOWING NEW TABLE SCHEMA FOR THE DATABASE


CREATE TABLE Branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL
    cellphone_num VARCHAR(20) NOT NULL,
    telephone_num VARCHAR(20) NOT NULL,
    branch_email VARCHAR(100) NOT NULL;
);





CREATE TABLE Administrator (
    admin_id SERIAL PRIMARY KEY,
    role TEXT[],
    username VARCHAR(225),
    password VARCHAR(225),
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);


update administrator set username = 'admin123@gmail.com'

INSERT INTO Administrator (admin_id, role, username, password, first_name, last_name)
VALUES (1, ARRAY[Owner'], 'admin123', '$2b$12$XohURN8fGR5.ZyHsBiEB3uINqdi1PAOiV1HfapBhWENyWDesb8G86', 'Bench Christian', 'Dela Luna'); --Pasword is: password





CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    branch_id INT NOT NULL,
    role TEXT[] NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    cell_number VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    hire_date DATE DEFAULT CURRENT_DATE,
    last_login VARCHAR(40),
    permissions TEXT[],
    address VARCHAR(255),
    is_disabled BOOL DEFAULT FALSE,
    status VARCHAR(20) DEFAULT 'active',
    created_by INT,
    approved_by INT,
    approved_at TIMESTAMP;
    FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);

CREATE INDEX idx_users_status ON Users(status);






CREATE TABLE Login_Credentials (
    user_id INT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);





CREATE TABLE Category (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);





CREATE TABLE Products (
    product_id INT,
    product_name VARCHAR(100),
    description TEXT DEFAULT 'N/A',
	PRIMARY KEY (product_id) 
);





CREATE TABLE Inventory_Product (
    product_id INT NOT NULL,
    branch_id INT NOT NULL,
    category_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    unit VARCHAR(15) NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    unit_cost DECIMAL(10, 2) NOT NULL,
    quantity INT,
    min_threshold INT NOT NULL,
    max_threshold INT NOT NULL,
    low_stock_notified BOOLEAN NOT NULL SET DEFAULT FALSE
    PRIMARY KEY (product_id, branch_id), 
    FOREIGN KEY (category_id) REFERENCES Category(category_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id);

);






CREATE TABLE Add_Stocks(
    add_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    branch_id INT NOT NULL,
    h_unit_price DECIMAL(10,2) NOT NULL,
    h_unit_cost DECIMAL(10,2) NOT NULL,
    quantity_added INT NOT NULL,
    quantity_left INT NOT NULL,
    date_added DATE NOT NULL,
    product_validity DATE NOT NULL,
    FOREIGN KEY (product_id, branch_id) 
    REFERENCES Inventory_Product(product_id, branch_id)

);





CREATE TABLE Inventory_Alerts (
    alert_id SERIAL PRIMARY KEY,
    product_id INT,
    branch_id INT,
    alert_type VARCHAR(100),
    message VARCHAR(255),
    banner_color VARCHAR(25),
    user_id INT,
    user_full_name VARCHAR(100),
    alert_date TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (product_id, branch_id) REFERENCES Inventory_Product(product_id, branch_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)

);





CREATE TABLE user_notification (
    user_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id)
    
);



CREATE TABLE admin_notification (
    admin_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (admin_id, alert_id),
    FOREIGN KEY (admin_id) REFERENCES Administrator(admin_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id) ON DELETE CASCADE
);





CREATE TABLE Sales_Information (
    sales_information_id INT PRIMARY KEY,
	branch_id INT,
    charge_to VARCHAR(255),
    tin VARCHAR(50),
    address VARCHAR(255),
    date DATE,
    vat DECIMAL(10, 2),
    amount_net_vat DECIMAL(10, 2),
    total_amount_due DECIMAL(10, 2),
    discount DECIMAL(10,2),
    transaction_by VARCHAR(100),
    delivery_fee INT,
    is_for_delivery BOOLEAN
	FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);

--NEW TABLES
ALTER TABLE Sales_Information ADD COLUMN delivery_fee INT
ALTER TABLE Sales_Information ADD COLUMN is_for_delivery BOOLEAN





CREATE TABLE Sales_Items (
    product_item_id SERIAL PRIMARY KEY,
    sales_information_id INT,
    product_id INT NOT NULL,
    branch_id INT NOT NULL,
    quantity INT,
    unit VARCHAR(50),
    unit_price DECIMAL(10, 2),
    amount DECIMAL(10, 2),
    FOREIGN KEY (sales_information_id) REFERENCES Sales_Information(sales_information_id),
    FOREIGN KEY (product_id, branch_id) REFERENCES Inventory_Product(product_id, branch_id)
);





CREATE TABLE Delivery (
    delivery_id INT PRIMARY KEY,
    sales_information_id INT,
    branch_id INT,
    destination_address VARCHAR(255),
    delivered_date DATE,
    courier_name VARCHAR(255),
    is_delivered BOOLEAN
    is_pending BOOLEAN
);





CREATE TABLE Sales_Stock_Usage (
    usage_id SERIAL PRIMARY KEY,
    sales_information_id INT NOT NULL,
    product_id INT NOT NULL,
    branch_id INT NOT NULL,              
    add_stock_id INT NOT NULL,          
    quantity_used INT NOT NULL,
    date_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_restored BOOLEAN DEFAULT FALSE,
    restored_date TIMESTAMP,
    FOREIGN KEY (sales_information_id) REFERENCES Sales_Information(sales_information_id),
    FOREIGN KEY (product_id, branch_id) REFERENCES Inventory_Product(product_id, branch_id),
    FOREIGN KEY (add_stock_id) REFERENCES Add_Stocks(add_id)
);

-- Indexes for performance
CREATE INDEX idx_sales_stock_usage_sale_id ON Sales_Stock_Usage(sales_information_id);
CREATE INDEX idx_sales_stock_usage_stock_id ON Sales_Stock_Usage(add_stock_id);
CREATE INDEX idx_sales_stock_usage_product ON Sales_Stock_Usage(product_id, branch_id);





-- NEW TABLE / PASSWORD RECOVERY
CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    user_id INT NULL,                    
    admin_id INT NULL,                   
    user_type VARCHAR(10) NOT NULL,     
    token VARCHAR(64) NOT NULL UNIQUE,  
    email VARCHAR(255) NOT NULL,        
    expires_at TIMESTAMP NOT NULL,    
    created_at TIMESTAMP DEFAULT NOW(), 
    used BOOLEAN DEFAULT FALSE,        
    used_at TIMESTAMP NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES Administrator(admin_id) ON DELETE CASCADE,
    UNIQUE(user_id, admin_id, user_type)
);

-- FOR PERFORMANCE
CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_password_reset_tokens_expires ON password_reset_tokens(expires_at);
CREATE INDEX idx_password_reset_tokens_user ON password_reset_tokens(user_id);
CREATE INDEX idx_password_reset_tokens_admin ON password_reset_tokens(admin_id);





CREATE TABLE Inventory_Pending_Actions (
    pending_id SERIAL PRIMARY KEY,
    branch_id INT NOT NULL REFERENCES Branch(branch_id),
    product_id INT NULL,
    action_type TEXT NOT NULL,
    payload JSONB NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending',
    current_stage TEXT NOT NULL DEFAULT 'manager_review',
    requires_admin_review BOOLEAN NOT NULL DEFAULT FALSE,
    created_by INT NOT NULL REFERENCES Users(user_id),
    created_by_name TEXT,
    created_by_roles TEXT[],
    manager_approver_id INT REFERENCES Users(user_id),
    manager_approved_at TIMESTAMP,
    admin_approver_id INT REFERENCES Administrator(admin_id),
    admin_approved_at TIMESTAMP,
    approved_by INT REFERENCES Users(user_id),
    approved_at TIMESTAMP,
    rejection_reason TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_inventory_pending_actions_branch ON Inventory_Pending_Actions(branch_id, status);
CREATE INDEX idx_inventory_pending_actions_stage ON Inventory_Pending_Actions(current_stage, status);





CREATE TABLE admin_notification (
    admin_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (admin_id, alert_id),
    FOREIGN KEY (admin_id) REFERENCES Administrator(admin_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id) ON DELETE CASCADE
);










--UPDATE THE DB STRUCTURE: STEP BY STEP



--1. REMOVE DEPENDENCY CONSTRAINTS
ALTER TABLE Add_Stocks DROP CONSTRAINT add_stocks_product_id_fkey;
ALTER TABLE Inventory_Alerts DROP CONSTRAINT inventory_alerts_product_id_fkey;
ALTER TABLE Sales_Items DROP CONSTRAINT sales_items_product_id_fkey;
ALTER TABLE Sales_Stock_Usage DROP CONSTRAINT sales_stock_usage_product_id_fkey;


--2. REMOVE ORIGINAL INVENTORY PRODUCTS CONSTRAINT
ALTER TABLE Inventory_Product DROP CONSTRAINT inventory_product_pkey;
ALTER TABLE Inventory_Product ADD PRIMARY KEY (product_id, branch_id);


--3. MODIFY ADD STOCKS CONSTRAINTS
ALTER TABLE Add_Stocks ADD COLUMN branch_id INT;
ALTER TABLE Add_Stocks 
    ADD CONSTRAINT add_stocks_product_branch_fk
    FOREIGN KEY (product_id, branch_id)
    REFERENCES Inventory_Product(product_id, branch_id);


--4. MODIFY ADD STOCKS CONSTRAINTS
ALTER TABLE Inventory_Alerts 
    ADD CONSTRAINT inv_alerts_product_branch_fk
    FOREIGN KEY (product_id, branch_id)
    REFERENCES Inventory_Product(product_id, branch_id);


--5. MODIFY SALES ITEMS CONSTRAINTS
ALTER TABLE Sales_Items ADD COLUMN branch_id INT NOT NULL;
ALTER TABLE Sales_Items 
    ADD CONSTRAINT sales_items_product_branch_fk
    FOREIGN KEY (product_id, branch_id)
    REFERENCES Inventory_Product(product_id, branch_id);


--6. MODIFY SALES STOCK USAGE CONSTRAINTS
ALTER TABLE Sales_Stock_Usage ADD COLUMN branch_id INT NOT NULL;
ALTER TABLE Sales_Stock_Usage 
    ADD CONSTRAINT sales_stock_product_branch_fk
    FOREIGN KEY (product_id, branch_id)
    REFERENCES Inventory_Product(product_id, branch_id);











--NEW SCHEMA


ALTER TABLE inventory_product ADD COLUMN max_threshold int 


UPDATE inventory_product SET max_threshold = 2000



ALTER TABLE inventory_product
RENAME COLUMN threshold TO min_threshold;




CREATE TABLE Products (
    product_id INT,
    product_name VARCHAR(100),
    description TEXT DEFAULT 'N/A',
	PRIMARY KEY (product_id) 
);



INSERT INTO Products (product_id, product_name)
SELECT DISTINCT ip.product_id, ip.product_name
FROM Inventory_Product ip
LEFT JOIN Products p
    ON ip.product_id = p.product_id
WHERE p.product_id IS NULL;



ALTER TABLE Inventory_Product
    ADD CONSTRAINT inventory_product_product_fk
    FOREIGN KEY (product_id)
    REFERENCES Products(product_id);




ALTER TABLE Users 
ADD COLUMN status VARCHAR(20) DEFAULT 'active',
ADD COLUMN created_by INT,
ADD COLUMN approved_by INT,
ADD COLUMN approved_at TIMESTAMP;


CREATE INDEX idx_users_status ON Users(status);


ALTER TABLE Users 
ADD CONSTRAINT fk_users_created_by 
FOREIGN KEY (created_by) REFERENCES Users(user_id);



ALTER TABLE Users
  ADD CONSTRAINT fk_users_approved_by
  FOREIGN KEY (approved_by) REFERENCES Administrator(admin_id);




CREATE TABLE Inventory_Pending_Actions (
    pending_id SERIAL PRIMARY KEY,
    branch_id INT NOT NULL REFERENCES Branch(branch_id),
    product_id INT NULL,
    action_type TEXT NOT NULL,
    payload JSONB NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending',
    current_stage TEXT NOT NULL DEFAULT 'manager_review',
    requires_admin_review BOOLEAN NOT NULL DEFAULT FALSE,
    created_by INT NOT NULL REFERENCES Users(user_id),
    created_by_name TEXT,
    created_by_roles TEXT[],
    manager_approver_id INT REFERENCES Users(user_id),
    manager_approved_at TIMESTAMP,
    admin_approver_id INT REFERENCES Administrator(admin_id),
    admin_approved_at TIMESTAMP,
    approved_by INT REFERENCES Users(user_id),
    approved_at TIMESTAMP,
    rejection_reason TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_inventory_pending_actions_branch ON Inventory_Pending_Actions(branch_id, status);
CREATE INDEX idx_inventory_pending_actions_stage ON Inventory_Pending_Actions(current_stage, status);




CREATE TABLE admin_notification (
    admin_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (admin_id, alert_id),
    FOREIGN KEY (admin_id) REFERENCES Administrator(admin_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id) ON DELETE CASCADE
);




ALTER TABLE Users
DROP CONSTRAINT fk_users_created_by;

ALTER TABLE Users
ALTER COLUMN created_by TYPE VARCHAR(255)
USING created_by::VARCHAR;


ALTER TABLE Users
DROP CONSTRAINT fk_users_approved_by


ALTER TABLE Users
ALTER COLUMN approved_by TYPE VARCHAR(255)
USING approved_by::VARCHAR;





analytics faster analytics

-- Critical indexes for analytics performance
CREATE INDEX IF NOT EXISTS idx_sales_date_branch ON Sales_Information(date, branch_id);
CREATE INDEX IF NOT EXISTS idx_sales_items_product ON Sales_Items(product_id, sales_information_id);
CREATE INDEX IF NOT EXISTS idx_add_stocks_date ON Add_Stocks(date_added, product_id, branch_id);
CREATE INDEX IF NOT EXISTS idx_inventory_product_branch ON Inventory_Product(branch_id, category_id);