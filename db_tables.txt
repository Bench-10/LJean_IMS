# HERE ATE THE FOLLOWING TABLES FOR THE DATABASE


CREATE TABLE Branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL
    cellphone_num VARCHAR(20) NOT NULL,
    telephone_num VARCHAR(20) NOT NULL,
    branch_email VARCHAR(100) NOT NULL;
);



INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (1, 'L-Jean Trading', 'Balagtas, Batangas', '(043) 123-4567', '(+63) 912-345-6789', 'ljeantrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (2, 'Vinseth Trading', 'Banaba South, Batangas', '(043) 234-5678', '(+63) 923-456-7890', 'vinsethtrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (3, 'MaraJean Trading', 'Libjo Central, Batangas', '(043) 345-6789', '(+63) 934-567-8901', 'marajeantrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (4, 'El Jean Construction Supply', 'San Antonio San Pascual, Batangas', '(043) 456-7890', '(+63) 945-678-9012', 'eljeanconstruction@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (5, 'Cams Trading', 'Mababang Ludlod Taal, Batangas', '(043) 706-0892', '(+63) 927-074-4142', 'ljeantrading@yahoo.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (6, 'Seth and L-Jean Trading', 'Banay-Banay San Jose, Batangas', '(043) 567-8901', '(+63) 956-789-0123', 'sethljeantrading@trading.com');





CREATE TABLE Administrator (
    admin_id SERIAL PRIMARY KEY,
    role TEXT[],
    username VARCHAR(225),
    password VARCHAR(225),
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);


update administrator set username = 'admin123@gmail.com'


INSERT INTO Administrator (admin_id, role, username, password, first_name, last_name)
VALUES (1, ARRAY[Owner'], 'admin123', '$2b$12$XohURN8fGR5.ZyHsBiEB3uINqdi1PAOiV1HfapBhWENyWDesb8G86', 'Bench Christian', 'Dela Luna'); --Pasword is: password





CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    branch_id INT NOT NULL,
    role TEXT[] NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    cell_number VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    hire_date DATE DEFAULT CURRENT_DATE,
    last_login VARCHAR(40),
    permissions TEXT[],
    address VARCHAR(255),
    is_disabled BOOL,
    FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);


ALTER TABLE Users -- NEW EDIT
ADD COLUMN is_disabled bool

UPDATE users SET is_disabled = false





CREATE TABLE Login_Credentials (
    user_id INT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);





CREATE TABLE Category (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);





CREATE TABLE Inventory_Product (
    product_id INT PRIMARY KEY, --NEW DATATYPE
    category_id INT NOT NULL,
    branch_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    unit VARCHAR(15) NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    unit_cost DECIMAL(10, 2) NOT NULL,
    quantity INT NOT NULL,
    threshold INT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES Category(category_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

--OR USE THIS IF DONT WANT TO RE-WRITE THE CODE AGAIN
ALTER TABLE inventory_product
ALTER COLUMN product_id DROP DEFAULT,
ALTER COLUMN product_id TYPE INT;
DROP SEQUENCE IF EXISTS inventory_product_product_id_seq;

ALTER TABLE inventory_product ALTER COLUMN quantity DROP NOT NULL;






CREATE TABLE Add_Stocks(
	add_id SERIAL PRIMARY KEY,
	product_id int not null,
	h_unit_price DECIMAL(10,2) not null,
	h_unit_cost DECIMAL(10,2) not null,
	quantity_added INT not null,
    quantity_left INT not null,
	date_added DATE not null,
	product_validity DATE not null,
	FOREIGN KEY (product_id) REFERENCES Inventory_Product(product_id)
);

--NEW UPDATES
alter table add_stocks
add column quantity_left int

update add_stocks set quantity_left = quantity_added





CREATE TABLE Inventory_Alerts (
    alert_id SERIAL PRIMARY KEY,
    product_id INT,
    branch_id INT,
    alert_type VARCHAR(100),
    message VARCHAR(255),
    banner_color VARCHAR(25),
    user_id INT,
    user_full_name VARCHAR(100),
    alert_date TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (product_id) REFERENCES Inventory_Product(product_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);


ALTER TABLE Inventory_Alerts
ADD COLUMN user_id INT,
ADD COLUMN user_full_name VARCHAR(100)





CREATE TABLE user_notification (
    user_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id)
);





CREATE TABLE Sales_Information (
    sales_information_id INT PRIMARY KEY,
	branch_id INT,
    charge_to VARCHAR(255),
    tin VARCHAR(50),
    address VARCHAR(255),
    date DATE,
    vat DECIMAL(10, 2),
    amount_net_vat DECIMAL(10, 2),
    total_amount_due DECIMAL(10, 2),
    discount DECIMAL(10,2),
    transaction_by VARCHAR(100)
	FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);


alter table Sales_Information -- NEW COLUMN
add column transaction_by varchar(100);

-NEW UPDATES
ALTER TABLE sales_information
RENAME COLUMN senior_pwd_discount TO discount;

ALTER TABLE sales_information
DROP COLUMN dicount_pwd_senior_number;

ALTER TABLE sales_information
ADD COLUMN delivery_fee INT;

UPDATE sales_information SET delivery_fee = 100

ALTER TABLE Sales_Information ADD COLUMN is_for_delivery BOOLEAN DEFAULT FALSE;






CREATE TABLE Sales_Items (
    product_item_id SERIAL PRIMARY KEY,
    sales_information_id INT,
    product_id INT,
    quantity INT,
    unit VARCHAR(50),
    unit_price DECIMAL(10, 2),
    amount DECIMAL(10, 2),
	FOREIGN KEY(sales_information_id) REFERENCES Sales_Information(sales_information_id),
	FOREIGN KEY(product_id) REFERENCES Inventory_Product(product_id)
);





CREATE TABLE Delivery (
    delivery_id INT PRIMARY KEY,
    sales_information_id INT,
    branch_id INT,
    destination_address VARCHAR(255),
    delivered_date DATE,
    courier_name VARCHAR(255),
    is_delivered BOOL
    is_pending BOOL
);





-- Add table to track which stock batches were used for each sale item
CREATE TABLE Sales_Stock_Usage (
    usage_id SERIAL PRIMARY KEY,
    sales_information_id INT NOT NULL,
    product_id INT NOT NULL,
    add_stock_id INT NOT NULL,  -- References Add_Stocks.add_id
    quantity_used INT NOT NULL,
    date_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_restored BOOLEAN DEFAULT FALSE,  -- Track if stock was restored
    restored_date TIMESTAMP,
    FOREIGN KEY (sales_information_id) REFERENCES Sales_Information(sales_information_id),
    FOREIGN KEY (product_id) REFERENCES Inventory_Product(product_id),
    FOREIGN KEY (add_stock_id) REFERENCES Add_Stocks(add_id)
);

-- Create index for better performance
CREATE INDEX idx_sales_stock_usage_sale_id ON Sales_Stock_Usage(sales_information_id);
CREATE INDEX idx_sales_stock_usage_stock_id ON Sales_Stock_Usage(add_stock_id);

-- Optional: Add comments for clarity
COMMENT ON TABLE Sales_Stock_Usage IS 'Tracks which stock batches were used for each sale item, enabling precise stock restoration';
COMMENT ON COLUMN Sales_Stock_Usage.is_restored IS 'TRUE when stock has been restored due to order cancellation/undelivered status';






-- PASSWORD RECOVERY
CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    user_id INT NULL,                    
    admin_id INT NULL,                   
    user_type VARCHAR(10) NOT NULL,     
    token VARCHAR(64) NOT NULL UNIQUE,  
    email VARCHAR(255) NOT NULL,        
    expires_at TIMESTAMP NOT NULL,    
    created_at TIMESTAMP DEFAULT NOW(), 
    used BOOLEAN DEFAULT FALSE,        
    used_at TIMESTAMP NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES Administrator(admin_id) ON DELETE CASCADE,
    UNIQUE(user_id, admin_id, user_type)
);

-- FOR PERFORMANCE
CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_password_reset_tokens_expires ON password_reset_tokens(expires_at);
CREATE INDEX idx_password_reset_tokens_user ON password_reset_tokens(user_id);
CREATE INDEX idx_password_reset_tokens_admin ON password_reset_tokens(admin_id);
