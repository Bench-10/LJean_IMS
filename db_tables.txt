# HERE ATE THE FOLLOWING TABLES FOR THE DATABASE


CREATE TABLE Branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL
    cellphone_num VARCHAR(20) NOT NULL,
    telephone_num VARCHAR(20) NOT NULL,
    branch_email VARCHAR(100) NOT NULL;
);



INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (1, 'L-Jean Trading', 'Balagtas, Batangas', '(043) 123-4567', '(+63) 912-345-6789', 'ljeantrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (2, 'Vinseth Trading', 'Banaba South, Batangas', '(043) 234-5678', '(+63) 923-456-7890', 'vinsethtrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (3, 'MaraJean Trading', 'Libjo Central, Batangas', '(043) 345-6789', '(+63) 934-567-8901', 'marajeantrading@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (4, 'El Jean Construction Supply', 'San Antonio San Pascual, Batangas', '(043) 456-7890', '(+63) 945-678-9012', 'eljeanconstruction@trading.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (5, 'Cams Trading', 'Mababang Ludlod Taal, Batangas', '(043) 706-0892', '(+63) 927-074-4142', 'ljeantrading@yahoo.com');

INSERT INTO Branch (branch_id, branch_name, address, telephone_num, cellphone_num, branch_email) 
VALUES (6, 'Seth and L-Jean Trading', 'Banay-Banay San Jose, Batangas', '(043) 567-8901', '(+63) 956-789-0123', 'sethljeantrading@trading.com');





CREATE TABLE Administrator (
    admin_id SERIAL PRIMARY KEY,
    role TEXT[],
    username VARCHAR(225),
    password VARCHAR(225),
    first_name VARCHAR(100),
    last_name VARCHAR(100)
);


update administrator set username = 'admin123@gmail.com'


INSERT INTO Administrator (admin_id, role, username, password, first_name, last_name)
VALUES (1, ARRAY[Owner'], 'admin123', '$2b$12$XohURN8fGR5.ZyHsBiEB3uINqdi1PAOiV1HfapBhWENyWDesb8G86', 'Bench Christian', 'Dela Luna'); --Pasword is: password





CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    branch_id INT NOT NULL,
    role TEXT[] NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    cell_number VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    hire_date DATE DEFAULT CURRENT_DATE,
    last_login VARCHAR(40),
    permissions TEXT[],
    address VARCHAR(255),
    is_disabled BOOL,
    FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);


ALTER TABLE Users -- NEW EDIT
ADD COLUMN is_disabled bool

UPDATE users SET is_disabled = false





CREATE TABLE Login_Credentials (
    user_id INT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE
);





CREATE TABLE Category (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL
);





CREATE TABLE Inventory_Product (
    product_id INT PRIMARY KEY, --NEW DATATYPE
    category_id INT NOT NULL,
    branch_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    unit VARCHAR(15) NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL,
    unit_cost DECIMAL(10, 2) NOT NULL,
    quantity INT NOT NULL,
    threshold INT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES Category(category_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

--OR USE THIS IF DONT WANT TO RE-WRITE THE CODE AGAIN
ALTER TABLE inventory_product
ALTER COLUMN product_id DROP DEFAULT,
ALTER COLUMN product_id TYPE INT;
DROP SEQUENCE IF EXISTS inventory_product_product_id_seq;






CREATE TABLE Add_Stocks(
	add_id SERIAL PRIMARY KEY,
	product_id int not null,
	h_unit_price DECIMAL(10,2) not null,
	h_unit_cost DECIMAL(10,2) not null,
	quantity_added INT not null,
	date_added DATE not null,
	product_validity DATE not null,
	FOREIGN KEY (product_id) REFERENCES Inventory_Product(product_id)
);





CREATE TABLE Inventory_Alerts (
    alert_id SERIAL PRIMARY KEY,
    product_id INT,
    branch_id INT,
    alert_type VARCHAR(100),
    message VARCHAR(255),
    banner_color VARCHAR(25),
    user_id INT,
    user_full_name VARCHAR(100),
    alert_date TIMESTAMP DEFAULT NOW(),
    FOREIGN KEY (product_id) REFERENCES Inventory_Product(product_id),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);


ALTER TABLE Inventory_Alerts
ADD COLUMN user_id INT,
ADD COLUMN user_full_name VARCHAR(100)





CREATE TABLE user_notification (
    user_id INT,
    alert_id INT,
    is_read BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (alert_id) REFERENCES Inventory_Alerts(alert_id)
);





CREATE TABLE Sales_Information (
    sales_information_id INT PRIMARY KEY,
	branch_id INT,
    charge_to VARCHAR(255),
    tin VARCHAR(50),
    address VARCHAR(255),
    date DATE,
    vat DECIMAL(10, 2),
    amount_net_vat DECIMAL(10, 2),
    total_amount_due DECIMAL(10, 2),
    dicount_pwd_senior_number VARCHAR(225),
    senior_pwd_discount DECIMAL(10,2)
	FOREIGN KEY(branch_id) REFERENCES Branch(branch_id)
);


alter table Sales_Information -- NEW COLUMN
add column transaction_by varchar(100);





CREATE TABLE Sales_Items (
    product_item_id SERIAL PRIMARY KEY,
    sales_information_id INT,
    product_id INT,
    quantity INT,
    unit VARCHAR(50),
    unit_price DECIMAL(10, 2),
    amount DECIMAL(10, 2),
	FOREIGN KEY(sales_information_id) REFERENCES Sales_Information(sales_information_id),
	FOREIGN KEY(product_id) REFERENCES Inventory_Product(product_id)
);





CREATE TABLE Delivery (
    delivery_id INT PRIMARY KEY,
    sales_information_id INT,
    branch_id INT,
    destination_address VARCHAR(255),
    delivered_date DATE,
    courier_name VARCHAR(255),
    is_delivered BOOL
    is_pending BOOL
);